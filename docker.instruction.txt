Создана сеть для докера под именем: network.local

Для запуска phpmyadmin необходим сервер mysql/mariadb. Создаем контейнер для сервера mariadb используя нашу сеть network.local чтоб разные контейнеры видели друг друга в сети:
# docker run --rm -d --network network.local --name mariadb -e MARIADB_ROOT_PASSWORD=12345 mariadb:10.6

Теперь запускаем контейнер с phpmyadmin и используем наш сервер mariadb как базу данных для phpmyadmin (чтоб зайти в phpmyadmin на своем компе используем порт 8080 т.е. localhost:8080):
# docker run --rm -d --network network.local --name phpmyadmin -p 8080:80 -e PMA_HOST=mariadb.local -e PMA_PASSWORD=12345 phpmyadmin


# Restart an existing container:
docker start  `docker ps -q -l` # restart it in the background
docker attach `docker ps -q -l` # reattach the terminal & stdin


Для запуска php:
# docker run --rm -d --name php --network network.local -p 8080:80 -v /home/ruslan/docker/share/php_html:/var/www/html php:5.5.29-apache
# docker run --rm -d --name php --network network.local -p 8080:80 -v /home/ruslan/docker/share/php_html:/var/www/html php:7.4-apache
# docker run --rm -d --name php --network network.local -p 8080:80 -v /home/ruslan/docker/share/php_html:/var/www/html php:8.2-apache
# docker run --rm -d --name php --network network.local -p 8080:80 -v /home/ruslan/docker/share/php_html:/var/www/html chitushka/php:1.0

Для запуска Mysql
# docker run --rm -d --name mysql -p 3306:3306 -v /home/ruslan/docker/share/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=12345 mysql:5.7

Для запуска Payara
# docker run --rm -d --name payara -p 8080:8080 -p 4848:4848 -v /home/ruslan/docker/share/payara:/opt/payara/deployments payara/server-full

Для запуска Postgresql
# docker run --rm -d --name postgresql --network network.local -p 5432:5432 -e POSTGRES_PASSWORD=postgres -e PGDATA=/var/lib/postgresql/data/pgdata -v /home/ruslan/docker/share/postgresql/data:/var/lib/postgresql/data postgres:10

Для запуска FirebirdSQL:
# docker run --rm -d --name firebird -p 127.0.0.1:3050:3050 -e ISC_PASSWORD=masterkey -v /home/ruslan/docker/share/firebird:/firebird jacobalberty/firebird:3.0

Для запуска jenkins:
# docker run --rm -d --name jenkins -p 8080:8080 -p 50000:50000 -v /home/ruslan/docker/share/jenkins_home:/var/jenkins_home jenkins:2.60.3-alpine

Для запуска ActiveMQ (JMX broker listens on port 61616 and Web Console on port 8161, 5672 - AMQP, 61613 - STOMP, 1883 - MQTT, 61614 - WS)
# docker run --rm -d --name activemq -p 61616:61616 -p 8161:8161 -v /home/ruslan/docker/share/activemq/conf:/opt/apache-activemq-5.15.6/conf -v /home/ruslan/docker/share/activemq/data:/opt/apache-activemq-5.15.6/data rmohr/activemq

Для запуска IBM MQ (вход в web консоль https://localhost:9443/ibmmq/console/login.html)
# docker run --rm -d --name ibmmq --network network.local -p 1414:1414 -p 9443:9443 -v /home/ruslan/docker/share/ibmmq/mqm:/mnt -e LICENSE=accept -e MQ_QMGR_NAME=QM1 ibmcom/mq:9.2.0.0-r2

Для запуска RabbitMQ
# docker run --rm -d --name rabbitmq -p 5672:5672 -v /home/ruslan/docker/share/etc:/etc/rabbitmq -v /home/ruslan/docker/share/var_lib:/var/lib/rabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin rabbitmq:3.9

Для запуска Tomcat
# docker run --rm -d --name tomcat -p 8080:8080 -v /home/ruslan/docker/share/tomcat/:/usr/local/tomcat/webapps tomcat:10-jdk11
# docker run --rm -d --name tomcat -p 8080:8080 -v /home/ruslan/docker/share/tomcat/:/usr/local/tomcat/webapps tomcat:10-jdk17
Использовать последнюю версию
# docker run --rm -d --name tomcat -p 8080:8080 -v /home/ruslan/docker/share/tomcat/:/usr/local/tomcat/webapps tomcat

Для запуска Rust
# docker run --rm -it --name rust -v /home/ruslan/docker/share/rust/:/home rust:latest

Для запуска Dart
# docker run --rm -it --name dart -p 8080:8080 -v /home/ruslan/docker/share/dart/:/home/dart dart:3.3

Для запуска MobSF Security Framework (для анализа Android приложений)
# docker run -it --rm -p 8000:8000 opensecurity/mobile-security-framework-mobsf

Для запуска Artifactory (JFrog) По-умолчанию logn=admin password=password
# docker run --name artifactory-pro -d -p 8081:8081 -p 8082:8082 docker.bintray.io/jfrog/artifactory-pro:latest 

Запуск php в фоне (ключ "-d") под именем php7.4-apache:
# docker run --rm -d --name php7.4-apache -p 8080:80 -v /home/ruslan/PhpstormProjects:/var/www/html php:7.4-apache

Для ubuntu (Выполнить такие же команды, для скачивания и сборки php которые при создании контейнера chitushka/ubuntu):
# docker run -it --name ubuntu --network network.local -p 8080:80 -v /home/ruslan/docker/share/ubuntu_tmp/php-src/:/home/php-src chitushka/ubuntu:1.0
# docker run --rm -it --name ubuntu2 --network network.local -p 8080:80 -v /home/ruslan/docker/share/ubuntu_tmp:/home chitushka/ubuntu:2.0
# docker run -it --name ubuntu -p 8080:80 -v /home/ruslan/r/workspace/CLionProjects/php:/home/php-src -v /home/ruslan/r/workspace/CLionProjects/phpgsl:/home/phpgsl chitushka/ubuntu:3.0 bash

Подключение к уже запущенному в фоне контейнеру:
# docker exec -it <имя контейнера или ID> <команда>
# docker exec -it php /bin/bash

Остановить контейнер запущенный в фоне:
# docker stop <имя контейнера или ID>
# docker stop php7.4-apache

Создание контейнера из Dockerfile
# docker build -t <container name>:<container version> <Dockerfile path>
# docker build -t myphp:1.0 .
# docker build -t chitushka/ubuntu:1.0 /home/ruslan/docker/images/ubuntu/







ОСНОВНЫЕ КОМАНДЫ:


Вход в реестр
docker login
docker login localhost:8080


Выход из реестра
docker logout
docker logout localhost:8080


Поиск образа
docker search nginx
docker search nginx -- filter stars=3 --no-trunc busybox


Pull (выгрузка из реестра) образа
docker pull nginx
docker pull eon01/nginx localhost:5000/myadmin/nginx


Push (загрузка в реестр) образа
docker push eon01/nginx
docker push eon01/nginx localhost:5000/myadmin/nginx


Создание контейнера
docker create -t -i eon01/infinite --name infinite


Первый запуск контейнера
docker run -it --name infinite -d eon01/infinite


Переименование контейнера
docker rename infinite infinity


Удаление контейнера
docker rm infinite


Обновление контейнера
docker update --cpu-shares 512 -m 300M infinite


Запуск остановленного контейнера
docker start nginx


Остановка
docker stop nginx


Перезагрузка
docker restart nginx


Пауза (приостановка всех процессов контейнера)
docker pause nginx


Снятие паузы
docker unpause nginx


Блокировка (до остановки контейнера)
docker wait nginx


Отправка SIGKILL (завершающего сигнала)
docker kill nginx


Отправка другого сигнала
docker kill -s HUP nginx


Подключение к существующему контейнеру
docker attach nginx


Работающие контейнеры
docker ps
docker ps -a


Логи контейнера
docker logs infinite


Информация о контейнере
docker inspect infinite
docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q)


События контейнера
docker events infinite


Публичные порты
docker port infinite


Выполняющиеся процессы
docker top infinite


Использование ресурсов
docker stats infinite


Изменения в файлах или директориях файловой системы контейнера
docker diff infinite


Список образов
docker images


Создание образов
docker build .
docker build github.com/creack/docker-firefox
docker build - < Dockerfile
docker build - < context.tar.gz
docker build -t eon/infinite .
docker build --no-cache -t eon/infinite .
docker build -f myOtherDockerfile .
curl example.com/remote/Dockerfile | docker build -f - .


Удаление образа
docker rmi nginx


Загрузка репозитория в tar (из файла или стандартного ввода)
docker load < ubuntu.tar.gz
docker load --input ubuntu.tar


Сохранение образа в tar-архив
docker save busybox > ubuntu.tar


Просмотр истории образа
docker history


Создание образа из контейнера
docker commit nginx


Тегирование образа
docker tag nginx eon01/nginx


Push (загрузка в реестр) образа
docker push eon01/nginx


Создание сети
docker network create -d overlay MyOverlayNetwork
docker network create -d bridge MyBridgeNetwork
docker network create -d overlay \
  --subnet=192.168.0.0/16 \
  --subnet=192.170.0.0/16 \
  --gateway=192.168.0.100 \
  --gateway=192.170.0.100 \
  --ip-range=192.168.1.0/24 \
  --aux-address="my-router=192.168.1.5" --aux-address="my-switch=192.168.1.6" \
  --aux-address="my-printer=192.170.1.5" --aux-address="my-nas=192.170.1.6" \
  MyOverlayNetwork


Удаление сети
docker network rm MyOverlayNetwork


Список сетей
docker network ls


Получение информации о сети
docker network inspect MyOverlayNetwork


Подключение работающего контейнера к сети
docker network connect MyOverlayNetwork nginx


Подключение контейнера к сети при его запуске
docker run -it -d --network=MyOverlayNetwork nginx


Отключение контейнера от сети
docker network disconnect MyOverlayNetwork nginx


Удаление работающего контейнера
docker rm nginx


Удаление контейнера и его тома (volume)
docker rm -v nginx


Удаление всех контейнеров со статусом exited
docker rm $(docker ps -a -f status=exited -q)


Удаление всех остановленных контейнеров
docker container prune
docker rm `docker ps -a -q`


Удаление контейнеров, остановленных более суток назад
docker container prune --filter "until=24h"


Удаление образа
docker rmi nginx


Удаление неиспользуемых (dangling) образов
docker image prune
docker rmi $(docker images -f dangling=true -q)


Удаление неиспользуемых (dangling) образов даже с тегами
docker image prune -a


Удаление всех образов
docker rmi $(docker images -a -q)


Удаление всех образов без тегов
docker rmi -f $(docker images | grep "^<none>" | awk "{print $3}")


Остановка и удаление всех контейнеров
docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)


Удаление неиспользуемых (dangling) томов
docker volume prune
docker volume rm $(docker volume ls -f dangling=true -q)


Удаление неиспользуемых (dangling) томов по фильтру
docker volume prune --filter "label!=keep"


Удаление неиспользуемых сетей
docker network prune


Удаление всех неиспользуемых объектов
docker system prune


По умолчанию для Docker 17.06.1+ тома не удаляются. Чтобы удалились и они тоже:
docker system prune --volumes


Установка Docker Swarm
curl -ssl https://get.docker.com | bash
В Docker версий 1.12.0+ ничего дополнительно устанавливать не требуется, т.к. Docker Swarm встроен в Docker Engine в виде специального режима (Swarm mode).

Инициализация Swarm
docker swarm init --advertise-addr 192.168.10.1


Подключение рабочего узла (worker) к Swarm
docker swarm join-token worker


Подключение управляющего узла (manager) к Swarm
docker swarm join-token manager


Список сервисов
docker service ls


Список узлов
docker node ls


Создание сервиса
docker service create --name vote -p 8080:80 instavote/vote


Список заданий Swarm
docker service ps


Масштабирование сервиса
docker service scale vote=3


Обновление сервиса
docker service update --image instavote/vote:movies vote
docker service update --force --update-parallelism 1 --update-delay 30s nginx
docker service update --update-parallelism 5--update-delay 2s --image instavote/vote:indent vote
docker service update --limit-cpu 2 nginx
docker service update --replicas=5 nginx
